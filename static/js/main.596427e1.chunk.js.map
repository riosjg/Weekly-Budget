{"version":3,"sources":["components/Error.js","components/Question.js","components/Form.js","components/Expense.js","components/List.js","helpers.js","components/BudgetController.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Question","setBudget","setRemaining","setShowQuestion","useState","count","setCount","error","setError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Form","addNewExpense","setCreateExpense","name","setName","trim","expense","id","shortid","generate","Expense","List","expenses","map","key","reviewBudget","budget","remaining","BudgetController","App","showQuestion","setExpenses","setExpense","createExpense","useEffect","remainingBudget","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.596427e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Error = ({message}) => {\r\n    return ( \r\n        <p className=\"alert alert-danger error\">{message}</p>\r\n     );\r\n}\r\n\r\nError.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport Error from './Error'\r\n\r\nconst Question = ({ setBudget, setRemaining, setShowQuestion}) => {\r\n    const [count, setCount] = useState(0);\r\n    const [error, setError] = useState(false);\r\n\r\n    const defineBudget = e => {\r\n        setCount( parseInt(e.target.value) );\r\n    }\r\n\r\n    const submitBudget = e => {\r\n        e.preventDefault();\r\n        if(count < 1 || isNaN(count) ){\r\n            setError(true);\r\n            return\r\n        }\r\n        setError(false);\r\n        setBudget(count);\r\n        setRemaining(count);\r\n        setShowQuestion(false);\r\n    }\r\n\r\n    return ( \r\n        <>\r\n        <h2>Submit your budget</h2>\r\n        \r\n        { error ? <Error message=\"The budget is not valid\"/>\r\n        : null}\r\n\r\n        <form\r\n            onSubmit={submitBudget}\r\n        >\r\n            <input\r\n            type=\"number\"\r\n            className=\"u-full-width\"\r\n            placeholder=\"Submit your budget\"\r\n            onChange={defineBudget}\r\n            />\r\n\r\n            <input \r\n                type=\"submit\"\r\n                className=\"button-primary u-full-width\"\r\n                value=\"Define budget\"\r\n            />\r\n        </form>\r\n        </>\r\n     );\r\n}\r\n\r\nQuestion.propTypes = {\r\n    setBudget: PropTypes.func.isRequired,\r\n    setRemaining: PropTypes.func.isRequired,\r\n    setShowQuestion: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Question;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport shortid from 'shortid'\r\nimport Error from './Error'\r\n\r\nconst Form = ({addNewExpense, setCreateExpense}) => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [count, setCount] = useState(0);\r\n    const [error, setError] = useState(false);\r\n\r\n    const addExpense = e => {\r\n        e.preventDefault();\r\n\r\n        if(count < 1 || isNaN(count) || name.trim() === ''){\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false);\r\n\r\n        const expense = {\r\n            name,\r\n            count,\r\n            id: shortid.generate()\r\n        }\r\n    \r\n        addNewExpense(expense);\r\n        setCreateExpense(true);\r\n\r\n        setName('');\r\n        setCount(0);\r\n\r\n    }\r\n\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={addExpense}\r\n        >\r\n            <h2>Add your expenses</h2>\r\n\r\n            {error ? \r\n            <Error message=\"Both fields must be filled\"/> : null}\r\n\r\n            <div className=\"campo\">\r\n                <label>Expense's name:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ex. Food\"\r\n                    value={name}\r\n                    onChange={e => setName(e.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"campo\">\r\n                <label>Expense's amount:</label>\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ex. 300\"\r\n                    value={count}\r\n                    onChange={e => setCount(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <input \r\n                type=\"submit\"\r\n                className=\"button-primary u-full-width\"\r\n                value=\"Add expense\"\r\n            />\r\n        </form>\r\n     );\r\n}\r\n\r\nForm.propTypes = {\r\n    addNewExpense: PropTypes.func.isRequired,\r\n    setCreateExpense: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Expense = ({expense}) => (  \r\n    <li className=\"gastos\">\r\n        <p>\r\n            {expense.name}\r\n\r\n            <span className=\"gasto\">$ {expense.count}</span>\r\n        </p>\r\n    </li>\r\n);\r\n \r\nExpense.propTypes = {\r\n    expense: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Expense ;","import React from 'react';\r\nimport Expense from './Expense'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst List = ({expenses}) => (\r\n    <div className=\"gastos-realizados\">\r\n        <h2>List</h2>\r\n        {expenses.map(e => (\r\n            <Expense \r\n                key={e.id}\r\n                expense={e}\r\n            />\r\n        ))}\r\n    </div>\r\n)\r\n\r\nList.propTypes = {\r\n    expenses: PropTypes.array.isRequired\r\n}\r\n\r\nexport default List;","export const reviewBudget = (budget, remaining) => {\r\n    let className;\r\n    if ( (budget / 4) > remaining ){\r\n        className = 'alert alert-danger';\r\n    } else if ( (budget / 2) > remaining){\r\n        className = 'alert alert-warning';\r\n    } else {\r\n        className = 'alert alert-success'\r\n    }\r\n\r\n    return className\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { reviewBudget } from '../helpers'\r\n\r\nconst BudgetController = ({budget, remaining}) => {\r\n    return ( \r\n        <>\r\n            <div className=\"alert alert-primary\">\r\n                Budget: {budget}\r\n            </div>\r\n            <div className={reviewBudget(budget, remaining)}>\r\n                Remaining Budget: {remaining}\r\n            </div>\r\n        </>\r\n     );\r\n}\r\n\r\nBudgetController.propTypes = {\r\n    budget: PropTypes.number.isRequired,\r\n    remaining: PropTypes.number.isRequired\r\n}\r\n\r\nexport default BudgetController;","import React, {useState, useEffect} from 'react';\nimport Question from './components/Question'\nimport Form from './components/Form'\nimport List from './components/List'\nimport BudgetController from './components/BudgetController'\n\nfunction App() {\n\n  const [budget, setBudget] = useState(0);\n  const [remaining, setRemaining] = useState(0);\n  const [showQuestion, setShowQuestion] = useState(true);\n  const [expenses, setExpenses] = useState([]);\n  const [expense, setExpense] = useState({});\n  const [createExpense, setCreateExpense] = useState(false);\n\n  //UseEffect updates the remaining budget\n\n  useEffect( () => {\n    \n    if(createExpense){\n      setExpenses([\n        ...expenses,\n        expense\n      ])\n\n      const remainingBudget = remaining - expense.count;\n      setRemaining(remainingBudget);\n\n    }\n\n    setCreateExpense(false)\n\n  }, [expense, createExpense, expenses, remaining])\n\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Weekly Budget</h1>\n        <div className=\"contenido-principal contenido\">\n          {showQuestion ?\n          ( <Question \n              setBudget={setBudget}\n              setRemaining={setRemaining}\n              setShowQuestion={setShowQuestion}\n          /> ) : \n          (\n            <div className=\"row\">\n              <div className=\"one-half column\">\n                <Form\n                  addNewExpense={setExpense}\n                  setCreateExpense={setCreateExpense}\n                />\n              </div>\n              <div className=\"one-half column\">\n                <List\n                  expenses={expenses}\n                />\n                <BudgetController\n                  budget={budget}\n                  remaining={remaining}\n                />\n              </div>\n            </div>\n          ) } \n\n          \n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}